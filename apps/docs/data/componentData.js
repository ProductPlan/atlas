module.exports = [{"name":"BasicButton","description":"A Basic Button","props":{"align":{"type":{"name":"enum","value":[{"value":"\"left\"","computed":false},{"value":"\"center\"","computed":false},{"value":"\"right\"","computed":false}]},"required":false,"description":"Button content alignment (left, center, right)","defaultValue":{"value":"\"center\"","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"The button is disabled or not","defaultValue":{"value":"undefined","computed":true}},"label":{"type":{"name":"string"},"required":true,"description":"Text to display in the button"},"htmlType":{"type":{"name":"enum","value":[{"value":"\"button\"","computed":false},{"value":"\"submit\"","computed":false},{"value":"\"reset\"","computed":false}]},"required":false,"description":"html type attribute, one of button, submit, or reset","defaultValue":{"value":"\"button\"","computed":false}},"htmlId":{"type":{"name":"string"},"required":false,"description":"html id attribute"},"type":{"type":{"name":"enum","value":[{"value":"\"default\"","computed":false},{"value":"\"secondary\"","computed":false},{"value":"\"tertiary\"","computed":false},{"value":"\"ghost\"","computed":false},{"value":"\"destructive\"","computed":false}]},"required":false,"description":"one of default, secondary, tertiary, destructive, ghost","defaultValue":{"value":"\"default\"","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Click Handler"},"size":{"type":{"name":"enum","value":[{"value":"\"default\"","computed":false},{"value":"\"small\"","computed":false},{"value":"\"mini\"","computed":false},{"value":"\"full-width\"","computed":false}]},"required":false,"description":"button size (default, small, mini, full-width)","defaultValue":{"value":"\"default\"","computed":false}},"trailingIcon":{"type":{"name":"element"},"required":false,"description":"icon to display to the right of the label","defaultValue":{"value":"null","computed":false}},"leadingIcon":{"type":{"name":"element"},"required":false,"description":"icon to display to the left of the label","defaultValue":{"value":"null","computed":false}}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./BasicButton.scss\";\n\nif (globalThis?.customElements) {\n  import(\"@productplan/atlas-web-components/dist/lib/BasicButton.js\");\n}\n\nconst buttonHtmlTypes = [\"button\", \"submit\", \"reset\"];\nexport const buttonVariants = [\n  \"default\",\n  \"secondary\",\n  \"tertiary\",\n  \"ghost\",\n  \"destructive\",\n];\nexport const buttonSizes = [\"default\", \"small\", \"mini\", \"full-width\"];\nexport const buttonAlignments = [\"left\", \"center\", \"right\"];\n\n/** A Basic Button */\nexport default function BasicButton({\n  label,\n  htmlId,\n  onClick,\n  align = \"center\",\n  disabled = undefined,\n  htmlType = \"button\",\n  leadingIcon = null,\n  size = \"default\",\n  trailingIcon = null,\n  type = \"default\",\n}) {\n  return (\n    <atlas-basic-button\n      align={align}\n      label={label}\n      theme={type}\n      onClick={onClick}\n      type={htmlType}\n      htmlId={htmlId}\n      disabled={disabled}\n      size={size}\n    >\n      {leadingIcon && <span slot=\"leadingIcon\">{leadingIcon}</span>}\n      {trailingIcon && <span slot=\"trailingIcon\">{trailingIcon}</span>}\n    </atlas-basic-button>\n  );\n}\n\nBasicButton.propTypes = {\n  /** Button content alignment (left, center, right) */\n  align: PropTypes.oneOf(buttonAlignments),\n  /** The button is disabled or not */\n  disabled: PropTypes.bool,\n  /** Text to display in the button */\n  label: PropTypes.string.isRequired,\n  /** html type attribute, one of button, submit, or reset */\n  htmlType: PropTypes.oneOf(buttonHtmlTypes),\n  /** html id attribute */\n  htmlId: PropTypes.string,\n  /** one of default, secondary, tertiary, destructive, ghost */\n  type: PropTypes.oneOf(buttonVariants),\n  /** Click Handler */\n  onClick: PropTypes.func,\n  /** button size (default, small, mini, full-width) */\n  size: PropTypes.oneOf(buttonSizes),\n  /** icon to display to the right of the label */\n  trailingIcon: PropTypes.element,\n  /** icon to display to the left of the label */\n  leadingIcon: PropTypes.element,\n};\n","examples":[{"name":"ExampleBasicButtonSizes","description":"Button Sizes","code":"import { BasicButton } from \"@productplan/atlas\";\n\n/** Button Sizes */\nexport default function ExampleBasicButtonSizes() {\n  const label = \"Button\";\n\n  return (\n    <>\n      <div>\n        <h5>Default</h5>\n\n        <BasicButton label={label} type=\"default\" />\n      </div>\n\n      <div>\n        <h5>Small</h5>\n\n        <BasicButton label={label} type=\"default\" size=\"small\" />\n      </div>\n\n      <div>\n        <h5>Mini</h5>\n\n        <BasicButton label={label} type=\"default\" size=\"mini\" />\n      </div>\n\n      <div>\n        <h5>Full Width</h5>\n\n        <BasicButton label={label} type=\"default\" size=\"full-width\" />\n      </div>\n    </>\n  );\n}\n"},{"name":"ExampleBasicButtonTypes","description":"Button Types (Themes)","code":"import { BasicButton } from \"@productplan/atlas\";\n\n/** Button Types (Themes) */\nexport default function ExampleBasicButtonStyles() {\n  const label = \"Button\";\n\n  return (\n    <>\n      <div>\n        <h5>Default</h5>\n\n        <BasicButton label={label} type=\"default\" />\n        <BasicButton label={label} type=\"default\" disabled />\n        <BasicButton label={label} type=\"default\" size=\"small\" />\n        <BasicButton label={label} type=\"default\" size=\"mini\" />\n      </div>\n\n      <div>\n        <h5>Secondary</h5>\n\n        <BasicButton label={label} type=\"secondary\" />\n        <BasicButton label={label} type=\"secondary\" disabled />\n        <BasicButton label={label} type=\"secondary\" size=\"small\" />\n        <BasicButton label={label} type=\"secondary\" size=\"mini\" />\n      </div>\n\n      <div>\n        <h5>Tertiary</h5>\n\n        <BasicButton label={label} type=\"tertiary\" />\n        <BasicButton label={label} type=\"tertiary\" disabled />\n        <BasicButton label={label} type=\"tertiary\" size=\"small\" />\n        <BasicButton label={label} type=\"tertiary\" size=\"mini\" />\n      </div>\n\n      <div>\n        <h5>Ghost</h5>\n\n        <BasicButton label={label} type=\"ghost\" />\n        <BasicButton label={label} type=\"ghost\" disabled />\n        <BasicButton label={label} type=\"ghost\" size=\"small\" />\n        <BasicButton label={label} type=\"ghost\" size=\"mini\" />\n      </div>\n\n      <div>\n        <h5>Destructive</h5>\n\n        <BasicButton label={label} type=\"destructive\" />\n        <BasicButton label={label} type=\"destructive\" disabled />\n        <BasicButton label={label} type=\"destructive\" size=\"small\" />\n        <BasicButton label={label} type=\"destructive\" size=\"mini\" />\n      </div>\n    </>\n  );\n}\n"},{"name":"ExampleBasicButtonWithLeadingIcon","description":"Button with a leading icon","code":"import { BasicButton } from \"@productplan/atlas\";\n\n/** Button with a leading icon */\nexport default function ExampleBasicButtonWithLeadingIcon() {\n  return (\n    <>\n      <BasicButton label=\"I have an icon!\" htmlType=\"button\" type=\"default\" leadingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" htmlType=\"button\" type=\"secondary\" leadingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" htmlType=\"button\" type=\"tertiary\" leadingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" htmlType=\"button\" type=\"destructive\" leadingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" htmlType=\"button\" type=\"ghost\" leadingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" htmlType=\"button\" type=\"default\" leadingIcon={<i className=\"fas fa-check\" />} size=\"small\" />\n      <BasicButton label=\"I have an icon!\" htmlType=\"button\" type=\"default\" leadingIcon={<i className=\"fas fa-check\" />} size=\"mini\" />\n    </>\n  );\n}\n"},{"name":"ExampleBasicButtonWithTrailingIcon copy","description":"Button with a trailing icon","code":"import { BasicButton } from \"@productplan/atlas\";\n\n/** Button with a trailing icon */\nexport default function ExampleBasicButtonWithTrailingIcon() {\n  return (\n    <>\n      <BasicButton label=\"I have an icon!\" type=\"default\" trailingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" type=\"secondary\" trailingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" type=\"tertiary\" trailingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" type=\"destructive\" trailingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" type=\"ghost\" trailingIcon={<i className=\"fas fa-check\" />} />\n      <BasicButton label=\"I have an icon!\" type=\"default\" trailingIcon={<i className=\"fas fa-check\" />} size=\"small\" />\n      <BasicButton label=\"I have an icon!\" type=\"default\" trailingIcon={<i className=\"fas fa-check\" />} size=\"mini\" />\n    </>\n  );\n}\n"},{"name":"Playground","description":"Playground","code":"import { useState } from \"react\";\nimport { BasicButton } from \"@productplan/atlas\";\n\n/** Playground */\nexport default function ExampleBasicButtonPlayground() {\n  const [size, setSize] = useState(\"default\");\n  const [theme, setTheme] = useState(\"default\");\n  const [disabled, setDisabled] = useState(false);\n  const [trailingIcon, setTrailingIcon] = useState(false);\n  const [leadingIcon, setLeadingIcon] = useState(false);\n  const [align, setAlign] = useState(\"center\");\n  const [label, setLabel] = useState(\"Button\");\n\n  const sizes = [\n    { value: \"default\", label: \"Default\" },\n    { value: \"small\", label: \"Small\" },\n    { value: \"mini\", label: \"Mini\" },\n    { value: \"full-width\", label: \"Full Width\"},\n  ];\n\n  const themes = [\n    { value: \"default\", label: \"Default\" },\n    { value: \"secondary\", label: \"Secondary\" },\n    { value: \"tertiary\", label: \"Tertiary\" },\n    { value: \"destructive\", label: \"Destructive\" },\n    { value: \"ghost\", label: \"Ghost\" },\n  ];\n\n  const alignments = [\n    { value: \"left\", label: \"Left\" },\n    { value: \"center\", label: \"Center\" },\n    { value: \"right\", label: \"Right\" },\n  ];\n\n  const changeSize = (e) => {\n    setSize(e.target.value);\n  };\n\n  const changeTheme = (e) => {\n    setTheme(e.target.value);\n  };\n\n  const changeDisabled = (e) => {\n    setDisabled(e.target.checked || false);\n  };\n\n  const changeTrailingIcon = (e) => {\n    setTrailingIcon(e.target.checked || false);\n  };\n\n  const changeLeadingIcon = (e) => {\n    setLeadingIcon(e.target.checked || false);\n  };\n\n  const changeLabel = (e) => {\n    setLabel(e.target.value);\n  };\n\n  const changeAlign = (e) => {\n    setAlign(e.target.value);\n  };\n\n  return (\n    <>\n      <div>\n        <h5>Size</h5>\n        <div className=\"example-playground-options\">\n          {sizes.map((s) => (\n            <label key={s.value}>\n              <input type=\"radio\" name=\"size\" value={s.value} onChange={changeSize} checked={s.value === size} />\n              {s.label}\n            </label>\n          ))}\n        </div>\n\n        <h5>Theme</h5>\n        <div className=\"example-playground-options\">\n          {themes.map((t) => (\n            <label key={t.value}>\n              <input type=\"radio\" name=\"theme\" value={t.value} onChange={changeTheme} checked={t.value === theme} />\n              {t.label}\n            </label>\n          ))}\n        </div>\n\n        <h5>Disabled</h5>\n        <div className=\"example-playground-options\">\n          <label>\n            <input type=\"checkbox\" name=\"disabled\" value=\"true\" onChange={changeDisabled} />\n            Disabled?\n          </label>\n        </div>\n\n        <h5>Trailing Icon</h5>\n        <div className=\"example-playground-options\">\n          <label>\n            <input type=\"checkbox\" name=\"trailingIcon\" value=\"true\" onChange={changeTrailingIcon} checked={trailingIcon === true} />\n            Show?\n          </label>\n        </div>\n\n        <h5>Leading Icon</h5>\n        <div className=\"example-playground-options\">\n        <label>\n            <input type=\"checkbox\" name=\"leadingIcon\" value=\"true\" onChange={changeLeadingIcon} checked={leadingIcon === true} />\n            Show?\n          </label>\n        </div>\n\n        <h5>Label</h5>\n        <div className=\"example-playground-options\">\n          <label>\n            <input type=\"text\" name=\"label\" value={label} onChange={changeLabel} />\n          </label>\n        </div>\n\n        <h5>Content Alignment</h5>\n        <div className=\"example-playground-options\">\n          {alignments.map((a) => (\n            <label key={a.value}>\n              <input type=\"radio\" name=\"align\" value={a.value} onChange={changeAlign} checked={a.value === align} />\n              {a.label}\n            </label>\n          ))}\n        </div>\n      </div>\n\n      <h5>Result:</h5>\n\n      <div>\n        <BasicButton\n          align={align}\n          label={label}\n          type={theme}\n          size={size}\n          disabled={disabled === true ? true : undefined}\n          trailingIcon={trailingIcon ? <i className=\"fas fa-check\" /> : null}\n          leadingIcon={leadingIcon ? <i className=\"fas fa-check\" /> : null}\n        />\n      </div>\n    </>\n  );\n}\n"}]},{"name":"DialogBox","description":"","props":{"title":{"type":{"name":"string"},"required":true,"description":"Displays in the Modal Header"},"subtitle":{"type":{"name":"string"},"required":true,"description":"Displays below the title"},"children":{"type":{"name":"element"},"required":false,"description":"child nodes composed in JSX"},"visible":{"type":{"name":"bool"},"required":false,"description":"whether the dialog is open or not","defaultValue":{"value":"false","computed":false}},"onCancel":{"type":{"name":"func"},"required":false,"description":"callback function for cancel event"},"onClose":{"type":{"name":"func"},"required":false,"description":"callback function for close event"},"customHeader":{"type":{"name":"element"},"required":false,"description":"pass in JSX to override the default header"},"customFooter":{"type":{"name":"element"},"required":false,"description":"pass in JSX to override the default footer"}},"code":"import React, { useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport BasicButton from \"@components/BasicButton\";\nimport \"./DialogBox.scss\";\nimport IconButton from \"@components/IconButton\";\n\n{\n  /** A Simple modal dialog that displays above the page content and renders children in the body of the modal */\n}\nexport default function DialogBox({\n  title,\n  subtitle,\n  // customHeader,\n  // customFooter,\n  children,\n  visible = false,\n  onCancel,\n  onClose,\n}) {\n  // const [isVisible, setIsVisible] = useState(false);\n  const dialogEl = useRef(null);\n\n  useEffect(() => {\n    if (visible) {\n      dialogEl.current.showModal();\n    }\n  }, [visible]);\n\n  // setIsVisible(visible);\n  return (\n    <dialog\n      className=\"ModalDialog\"\n      ref={dialogEl}\n      onCancel={onCancel}\n      onClose={onClose}\n    >\n      <ModalHeader\n        title={title}\n        subtitle={subtitle}\n        handleClose={() => dialogEl.current.close()}\n      />\n\n      <section className=\"ModalDialog__body\">{children}</section>\n\n      <ModalFooter>\n        <BasicButton\n          type=\"ghost\"\n          label=\"Cancel\"\n          onClick={() => dialogEl.current.close()}\n          htmlId=\"dialogBoxCancel\"\n        />\n        <BasicButton label=\"Submit\" htmlType=\"submit\" htmlForm=\"aform\" />\n      </ModalFooter>\n    </dialog>\n  );\n}\n\nDialogBox.propTypes = {\n  /** Displays in the Modal Header */\n  title: PropTypes.string.isRequired,\n  /** Displays below the title */\n  subtitle: PropTypes.string.isRequired,\n  /** child nodes composed in JSX */\n  children: PropTypes.element,\n  /** whether the dialog is open or not */\n  visible: PropTypes.bool,\n  /** callback function for cancel event */\n  onCancel: PropTypes.func,\n  /** callback function for close event */\n  onClose: PropTypes.func,\n  /** pass in JSX to override the default header */\n  customHeader: PropTypes.element,\n  /** pass in JSX to override the default footer */\n  customFooter: PropTypes.element,\n};\n\nfunction ModalHeader({ title, subtitle, handleClose }) {\n  return (\n    <header className=\"ModalDialog__header\">\n      <div>\n        <h1 className=\"ModalDialog__title\">{title}</h1>\n        <p className=\"ModalDialog__subtitle\">{subtitle}</p>\n      </div>\n      <IconButton faClass=\"fa-times\" onClick={handleClose} />\n    </header>\n  );\n}\n\nModalHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n\nfunction ModalFooter(props) {\n  return <footer className=\"ModalDialog__footer\">{props.children}</footer>;\n}\n\nModalFooter.propTypes = {\n  children: PropTypes.element,\n};\n","examples":[{"name":"ExampleDialogBox","description":"Static Example","code":"import React from \"react\";\nimport { IconButton, BasicButton } from \"@productplan/atlas\";\n\n/** Static Example */\nexport default function ExampleDialogBox() {\n  return (\n    <div className=\"ModalDialog\">\n      <header className=\"ModalDialog__header\">\n        <div>\n          <h1 className=\"ModalDialog__title\">Title</h1>\n          <p className=\"ModalDialog__subtitle\">Subtitle</p>\n        </div>\n        <IconButton faClass=\"fa-times\" onClick={() => {}} />\n      </header>\n      <section className=\"ModalDialog__body\">\n        Children render in the body\n      </section>\n      <footer className=\"ModalDialog__footer\">\n        <BasicButton htmlId=\"cancel\" type=\"ghost\" label=\"Cancel\" onClick={() => {}} />\n        <BasicButton htmlId=\"submit\" label=\"Submit\" htmlType=\"submit\" htmlForm=\"aform\" />\n      </footer>\n    </div>\n  );\n}\n"},{"name":"ExampleDialogBoxLive","description":"Live Demo","code":"import React, {useState} from \"react\";\nimport {DialogBox, BasicButton} from \"@productplan/atlas\";\n\n/** Live Demo */\nexport default function ExampleDialogBoxLive() {\n  const [isVisible, setIsVisible] = useState(false);\n  const onClose = () => setIsVisible(false);\n  return (\n    <div>\n      <BasicButton label=\"Launch Modal\" htmlForm=\"\" htmlType=\"button\" type=\"default\" onClick={() => setIsVisible(true)} />\n      <DialogBox title=\"Title\" subtitle=\"Subtitle\" visible={isVisible} onCancel={onClose} onClose={onClose}>\n        <div>Modal Dialog renders children in the body</div>\n      </DialogBox>\n    </div>\n  \n  )\n}\n"}]},{"name":"Drawer","description":"A drawer is used when you need to perform an action that may be helped by keeping the roadmap layout in context.\nThis will most likely be a place for multiple actions or a place for a complex action that takes multiple steps.","props":{"position":{"type":{"name":"enum","value":[{"value":"\"left\"","computed":false},{"value":"\"right\"","computed":false},{"value":"\"top\"","computed":false},{"value":"\"bottom\"","computed":false}]},"required":true,"description":"Position for the Drawer. Options: top, bottom, right, left"},"open":{"type":{"name":"bool"},"required":false,"description":"Current state for the Drawer.","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"Children (nodes) to display inside the Drawer"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport BasicButton from \"@components/BasicButton\";\nimport \"./Drawer.scss\";\n\nconst DrawerBack = ({ label = \"Back\", onClick = () => {} }) => {\n  const classes = classNames(\"Drawer__back\");\n\n  return (\n    <div className={classes}>\n      <BasicButton\n        label={label}\n        type=\"ghost\"\n        onClick={onClick}\n        leadingIcon={<i className=\"fa fa-chevron-left\"></i>}\n      />\n    </div>\n  );\n};\n\nDrawerBack.propTypes = {\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nconst DrawerActions = ({ children }) => {\n  const classes = classNames(\"Drawer__actions\");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerActions.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerTitle = ({ children }) => {\n  const classes = classNames(\"Drawer__title\");\n\n  return <h4 className={classes}>{children}</h4>;\n};\n\nDrawerTitle.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerHeader = ({ children }) => {\n  const classes = classNames(\"Drawer__header\");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerHeader.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerBody = ({ children }) => {\n  const classes = classNames(\"Drawer__body\");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerBody.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerFooter = ({ children }) => {\n  const classes = classNames(\"Drawer__footer\");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerFooter.propTypes = {\n  children: PropTypes.node,\n};\n\n/**\n * A drawer is used when you need to perform an action that may be helped by keeping the roadmap layout in context.\n * This will most likely be a place for multiple actions or a place for a complex action that takes multiple steps.\n *\n */\nexport default function Drawer({ position, children, open = false }) {\n  const drawerClasses = classNames(\"Drawer\", `Drawer--${position}`);\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <div role=\"dialog\" aria-modal=\"true\" className={drawerClasses}>\n      {children}\n    </div>\n  );\n}\n\nDrawer.Header = DrawerHeader;\nDrawer.Body = DrawerBody;\nDrawer.Footer = DrawerFooter;\nDrawer.Title = DrawerTitle;\nDrawer.Actions = DrawerActions;\nDrawer.Back = DrawerBack;\n\nDrawer.propTypes = {\n  /** Position for the Drawer. Options: top, bottom, right, left */\n  position: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]).isRequired,\n  /** Current state for the Drawer. */\n  open: PropTypes.bool,\n  /** Children (nodes) to display inside the Drawer */\n  children: PropTypes.node,\n};\n","examples":[{"name":"ExampleDrawer","description":"","code":"import React, { useState } from \"react\";\nimport { useCallback } from \"react\";\nimport { Drawer, BasicButton, IconButton } from \"@productplan/atlas\";\nimport { buttonVariants } from \"@productplan/atlas\";\n\nexport default function ExampleDrawer() {\n  // Full size Drawer\n  const [open, setOpen] = useState(false);\n  const [position, setPosition] = useState(\"right\");\n\n  const closeDrawer = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const openDrawer = useCallback((newPosition) => {\n    setPosition(newPosition);\n    setOpen(true);\n  }, []);\n\n  const availablePositions = [\"left\", \"right\", \"top\", \"bottom\"];\n\n  return (\n    <div>\n      {availablePositions.map((position) => (\n        <BasicButton\n          kye={`${position}-button`}\n          label={`Launch Drawer (${position})`}\n          htmlForm=\"\"\n          htmlType=\"button\"\n          type=\"default\"\n          onClick={() => openDrawer(position)}\n        />\n      ))}\n\n      <Drawer open={open} position={position}>\n        <Drawer.Header>\n          <Drawer.Back\n            onClick={() => {\n              alert(\"Clicked on the Back button\");\n            }}\n          />\n          <Drawer.Title>Drawer Title</Drawer.Title>\n          <Drawer.Actions>\n            <IconButton faClass=\"fa-times\" onClick={closeDrawer} />\n          </Drawer.Actions>\n        </Drawer.Header>\n        <Drawer.Body>\n          <div>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n            <p>This is the Body for the Drawer</p>\n          </div>\n        </Drawer.Body>\n        <Drawer.Footer>\n          <BasicButton type=\"ghost\" label=\"Cancel\" onClick={closeDrawer} />\n          <BasicButton type=\"default\" label=\"Confirm\" onClick={closeDrawer} />\n        </Drawer.Footer>\n      </Drawer>\n    </div>\n  );\n}\n"}]},{"name":"IconButton","description":"A simple button containing only an icon","props":{"faClass":{"type":{"name":"string"},"required":true,"description":"The icon class to render"},"onClick":{"type":{"name":"func"},"required":false,"description":"Click Handler"},"isActive":{"type":{"name":"bool"},"required":false,"description":"Whether or not the button is active"}},"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport \"./IconButton.scss\";\n\n/** A simple button containing only an icon */\nexport default function IconButton({ faClass, onClick, isActive }) {\n  const iconClasses = classNames(\"fa\", faClass);\n  const buttonClasses = classNames(\"IconButton\", {\n    \"is-active\": isActive,\n  });\n\n  return (\n    <button className={buttonClasses} onClick={onClick}>\n      <i className={iconClasses} />\n    </button>\n  );\n}\n\nIconButton.propTypes = {\n  /** The icon class to render */\n  faClass: PropTypes.string.isRequired,\n  /** Click Handler */\n  onClick: PropTypes.func,\n  /** Whether or not the button is active */\n  isActive: PropTypes.bool,\n};\n","examples":[{"name":"ExampleIconButton","description":"Default style","code":"import React from \"react\";\nimport {IconButton} from \"@productplan/atlas\";\n\n/** Default style */\nexport default function ExampleIconButton() {\n  return <IconButton faClass=\"fa-times\" htmlId=\"example_icon_button\" />\n}\n"}]}]