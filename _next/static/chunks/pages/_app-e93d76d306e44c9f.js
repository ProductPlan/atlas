(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[888],{2779:function(e,n){var t;!function(){"use strict";var a={}.hasOwnProperty;function o(){for(var e=[],n=0;n<arguments.length;n++){var t=arguments[n];if(t){var l=typeof t;if("string"===l||"number"===l)e.push(t);else if(Array.isArray(t)){if(t.length){var i=o.apply(null,t);i&&e.push(i)}}else if("object"===l){if(t.toString!==Object.prototype.toString&&!t.toString.toString().includes("[native code]")){e.push(t.toString());continue}for(var r in t)a.call(t,r)&&t[r]&&e.push(r)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(t=function(){return o}.apply(n,[]))||(e.exports=t)}()},2170:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_app",function(){return t(7034)}])},5319:function(e){"use strict";e.exports=[{name:"AtlasAlert",description:"An alert which contains important information about a page.",props:{type:{type:{name:"enum",value:[{value:'"default"',computed:!1},{value:'"information"',computed:!1},{value:'"success"',computed:!1},{value:'"warning"',computed:!1},{value:'"danger"',computed:!1}]},required:!1,description:"one of default, information, success, warning, danger",defaultValue:{value:'"default"',computed:!1}},title:{type:{name:"string"},required:!1,description:"text to display for the title",defaultValue:{value:"null",computed:!1}},label:{type:{name:"string"},required:!1,description:"text to display in the button",defaultValue:{value:"null",computed:!1}},handleClick:{type:{name:"func"},required:!1,description:"click handler"},content:{type:{name:"string"},required:!0,description:"text to display for the content"},icon:{type:{name:"element"},required:!0,description:"icon to display to the left of alert content"}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport classNames from "classnames";\nimport BasicButton from "@components/BasicButton";\nimport "./AtlasAlert.scss";\n\nexport const alertTypes = ["default", "information", "success", "warning", "danger"];\n/** An alert which contains important information about a page.  */\nexport default function AtlasAlert({\n  type = "default",\n  title=null,\n  label=null,\n  handleClick,\n  content,\n  icon,\n}) {\n  const classes = classNames("AtlasAlert", { [`AtlasAlert--${type}`]: true });\n\n  return (\n    <div className={classes}>\n      {icon}\n      <div className="AtlasAlert__body">\n        {title && <div className="AtlasAlert__title">{title}</div>}\n        <div className="AtlasAlert__content">{content}</div>\n        {label && (\n          <BasicButton\n            className="AtlasAlert__button"\n            label={label}\n            size="mini"\n            onClick={handleClick}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nAtlasAlert.propTypes = {\n  /** one of default, information, success, warning, danger */\n  type: PropTypes.oneOf(alertTypes),\n  /** text to display for the title */\n  title: PropTypes.string,\n  /** text to display in the button */\n  label: PropTypes.string,\n  /** click handler */\n  handleClick: PropTypes.func,\n  /** text to display for the content */\n  content: PropTypes.string.isRequired,\n  /** icon to display to the left of alert content  */\n  icon: PropTypes.element.isRequired,\n};\n',examples:[{name:"ExampleAtlasAlertTypes",description:"Alert Types",code:'import React from "react";\nimport { AtlasAlert } from "@productplan/atlas";\n\n\n/** Alert Types */\nexport default function ExampleAtlasAlertTypes() {\n  return (\n    <div style={{border: \'2px solid var(--a-color-light-gray-100)\', width: \'556px\', borderRadius: \'4px\'}}>\n    <div style={{margin:\'4px\'}}>\n        <AtlasAlert\n          content="This is a default alert."\n          icon={<i className="fas fa-circle-info"></i>}\n        />\n      </div>\n      <div style={{margin:\'0px 4px 4px 4px\'}}>\n        <AtlasAlert\n          content="This is an information alert."\n          icon={<i className="fas fa-circle-info"></i>}\n          type="information"\n        />\n      </div>  \n\n      <div style={{margin:\'0px 4px 4px 4px\'}}> \n        <AtlasAlert\n          content="This is a success alert."\n          icon={<i className="fas fa-circle-check"></i>}\n          type="success"\n        />\n      </div>\n      <div style={{margin:\'0px 4px 4px 4px\'}}>\n        <AtlasAlert\n          content="This is a warning alert."\n          icon={<i className="fas fa-circle-exclamation"></i>}\n          type="warning"\n        />\n      </div>\n      <div style={{margin:\'0px 4px 4px 4px\'}}>\n        <AtlasAlert\n          content="This is a danger alert."\n          icon={<i className="fas fa-triangle-exclamation"></i>}\n          type="danger"\n        />\n      </div>\n    </div>\n  )\n  \n}\n'},{name:"ExampleAtlasAlertWithButton",description:"Alert with Button",code:"import React from \"react\";\nimport { AtlasAlert } from \"@productplan/atlas\";\n\n/** Alert with Button */\nexport default function ExampleAtlasAlertWithButton() {\n  return (\n    <div style={{border: '2px solid var(--a-color-light-gray-100)', width: '556px', borderRadius: '4px'}}>\n    <div style={{margin:'4px'}}>\n        <AtlasAlert\n          content=\"This is the content of a default alert.\"\n          icon={<i className=\"fas fa-circle-info\"></i>}\n          label='Default'\n          handleClick = { () => alert('Hello!')}\n        />\n      </div>\n    </div>\n  )\n  \n}"},{name:"ExampleAtlasAlertWithTitle",description:"Alert with Title",code:"import React from \"react\";\nimport { AtlasAlert } from \"@productplan/atlas\";\n\n/** Alert with Title */\nexport default function ExampleAtlasAlertWithTitle() {\n  return (\n    <div style={{border: '2px solid var(--a-color-light-gray-100)', width: '556px', borderRadius: '4px'}}>\n    <div style={{margin:'4px'}}>\n        <AtlasAlert\n          title=\"This information alert has a title!\"\n          content=\"This is the content of an information alert with only a title.\"\n          icon={<i className=\"fas fa-circle-info\"></i>}\n          type='information'\n        />\n      </div>\n    </div>\n  )\n  \n}\n"},{name:"ExampleAtlasAlertWithTitleButton",description:"Alert with Button and Title",code:"import React from \"react\";\nimport { AtlasAlert } from \"@productplan/atlas\";\n\n/** Alert with Button and Title */\nexport default function ExampleAtlasAlertWithTitleButton() {\n  return (\n    <div style={{border: '2px solid var(--a-color-light-gray-100)', width: '556px', borderRadius: '4px'}}>\n    <div style={{margin:'4px'}}>\n        <AtlasAlert\n          title=\"This success alert has a title!\"\n          content=\"This is the content of a success alert that has a title and button.\"\n          icon={<i className=\"fas fa-circle-check\"></i>}\n          label='Success'\n          handleClick = { () => alert('Success!')}\n          type='success'\n        />\n      </div>\n    </div>\n  )\n  \n}"}]},{name:"AtlasBanner",description:"A banner which appears on load of a page and rests at the top of the page. They can be dismissible by clicking the close icon, or disappear after a certain duration.",props:{type:{type:{name:"enum",value:[{value:'"information"',computed:!1},{value:'"warning"',computed:!1},{value:'"destructive"',computed:!1},{value:'"success"',computed:!1}]},required:!1,description:"one of information, warning, destructive, success",defaultValue:{value:'"information"',computed:!1}},isDismissable:{type:{name:"bool"},required:!1,description:"whether or not you can close the banner"},title:{type:{name:"string"},required:!0,description:"text to display for the title"},label:{type:{name:"string"},required:!1,description:"text to display in the button",defaultValue:{value:"null",computed:!1}},handleClick:{type:{name:"func"},required:!1,description:"click handler"},handleClose:{type:{name:"func"},required:!1,description:"click handler to close banner"},timeout:{type:{name:"number"},required:!1,description:"how long to display the banner (in milliseconds)"},leadingIcon:{type:{name:"element"},required:!0,description:"icon to display to the left of banner content"},trailingIcon:{type:{name:"element"},required:!1,description:"icon to display to the right of banner content"}},code:'import React, { useEffect, useState } from "react";\nimport PropTypes from "prop-types";\nimport classNames from "classnames";\nimport BasicButton from "@components/BasicButton";\nimport "./AtlasBanner.scss";\n\nconst bannerTypes = ["information", "warning", "destructive", "success"];\n/** A banner which appears on load of a page and rests at the top of the page. They can be dismissible by clicking the close icon, or disappear after a certain duration. */\nexport default function AtlasBanner({\n  type = "information",\n  isDismissable,\n  title,\n  label = null,\n  handleClick,\n  timeout,\n  leadingIcon,\n  trailingIcon,\n  handleClose\n}) {\n  const [isOpen, setIsOpen] = useState(true);\n  const classes = classNames("AtlasBanner", {\n    [`AtlasBanner--${type}`]: true,\n    "AtlasBanner--dismissable": isDismissable,\n    "AtlasBanner--button": label,\n  });\n\n  useEffect(() => {\n    if (timeout) {\n      setTimeout(() => {\n        setIsOpen(false);\n      }, timeout);\n    }\n  }, []);\n\n  const handleCloseBanner = () => {\n    handleClose()\n    setIsOpen(false)\n  }\n\n  if(!isOpen){\n    return\n  }\n  return (\n    <div className={classes}>\n      <div className="AtlasBanner__content">\n        {leadingIcon}\n        {title && <div className="AtlasBanner__title">{title}</div>}\n        {label && (\n          <BasicButton label={label} size="mini" onClick={handleClick} />\n        )}\n        {isDismissable && (\n          <button aria-label="close" onClick={handleCloseBanner}>{trailingIcon}</button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nAtlasBanner.propTypes = {\n  /** one of information, warning, destructive, success */\n  type: PropTypes.oneOf(bannerTypes),\n  /** whether or not you can close the banner */\n  isDismissable: PropTypes.bool,\n  /** text to display for the title */\n  title: PropTypes.string.isRequired,\n  /** text to display in the button */\n  label: PropTypes.string,\n  /** click handler */\n  handleClick: PropTypes.func,\n  /** click handler to close banner */\n  handleClose: PropTypes.func,\n  /** how long to display the banner (in milliseconds) */\n  timeout: PropTypes.number,\n  /** icon to display to the left of banner content  */\n  leadingIcon: PropTypes.element.isRequired,\n  /** icon to display to the right of banner content  */\n  trailingIcon: PropTypes.element,\n};\n',examples:[{name:"ExampleAtlasBanner",description:"Banner Types",code:'import React from "react";\nimport { AtlasBanner } from "@productplan/atlas";\n\n/** Banner Types */\nexport default function ExampleAtlasBanner() {\n  return (\n    <div\n    style={{\n      display: "flex",\n      flexDirection: "column",\n      justifyContent: "space-around",\n      height: "300px",\n    }}\n  >\n    <AtlasBanner\n      title="This is an information banner."\n      leadingIcon={<i className="fas fa-circle-info"></i>}\n      type="information"\n    />\n    <AtlasBanner\n      title="This is a warning banner."\n      leadingIcon={<i className="fas fa-circle-exclamation"></i>}\n      type="warning"\n    />\n    <AtlasBanner\n      title="This is a destructive banner."\n      leadingIcon={<i className="fas fa-triangle-exclamation"></i>}\n      type="destructive"\n    />\n    <AtlasBanner\n      title="This is a success banner."\n      leadingIcon={<i className="fas fa-circle-info"></i>}\n      type="success"\n    />\n  </div>\n  )\n}\n'},{name:"ExampleAtlasBannerButton",description:"Banner with Button",code:'import React from "react";\nimport { AtlasBanner } from "@productplan/atlas";\n\n/** Banner with Button */\nexport default function ExampleAtlasBannerButton() {\n  return (\n    <div>\n    <AtlasBanner \n            title="This banner has a button." \n            label="Label"  \n            leadingIcon={<i className="fas fa-circle-info"></i>} \n            type="information"\n            handleClick = {(() => alert(\'Hello!\'))}\n    />\n  </div>\n  )\n}\n'},{name:"ExampleAtlasBannerDismissable",description:"Dismissable Banner",code:'import React, {useState} from "react";\nimport { AtlasBanner, BasicButton } from "@productplan/atlas";\n\n/** Dismissable Banner */\nexport default function ExampleAtlasBannerDismissable() {\n    const [showButton, setShowButton] = useState(false)\n\n    return (\n        <div>\n         {showButton ?  \n         <BasicButton label="Show Banner" onClick={(()=> setShowButton(false))}/> \n         : <AtlasBanner\n          title="This banner can be dismissed."\n          leadingIcon={<i className="fa fa-circle-exclamation"></i>}\n          trailingIcon={<i className="fas fa-xmark"></i>}\n          type="warning"\n          isDismissable\n          handleClose = {(()=> setShowButton(true))}\n        />}\n      </div>\n    )\n  }'},{name:"ExampleAtlasBannerDismissableButton",description:"Dismissable Banner with Button",code:'import React, {useState} from "react";\nimport { AtlasBanner, BasicButton } from "@productplan/atlas";\n\n/** Dismissable Banner with Button */\nexport default function ExampleAtlasBannerDismissableButton() {\n    const [showButton, setShowButton] = useState(true)\n\n    return (\n        <div>\n         {showButton ?  \n         <BasicButton label="Show Banner" onClick={(()=> setShowButton(false))}/> \n         : <AtlasBanner\n          label="Button" \n          title="This is a title."\n          leadingIcon={<i className="fas fa-triangle-exclamation"></i>}\n          trailingIcon={<i className="fas fa-xmark"></i>}\n          type="destructive"\n          isDismissable\n          handleClose = {(()=> setShowButton(true))}\n          handleClick = {(() => alert(\'Hello!\'))}\n          />}\n      </div>\n    )\n  }'}]},{name:"AtlasPopover",description:"A popover which displays above or below the thing which opens it, pointing\nback to that thing",props:{placement:{type:{name:"string"},required:!1,description:"specify if it should be positioned above or below",defaultValue:{value:'"top"',computed:!1}},description:{type:{name:"string"},required:!0,description:"the primary text of the popover, truncated to 8 lines"},title:{type:{name:"string"},required:!1,description:"text which displays in the header of the popover"},onReadMoreClick:{type:{name:"func"},required:!1,description:"what to do if Read more is clicked. if not present, read more will not display"},children:{type:{name:"any"},required:!1,description:"HTML/component(s) to display at the bottom of the popover, such as for metadata"},simple:{type:{name:"bool"},required:!1,description:"whether to display the default or simple popover",defaultValue:{value:"false",computed:!1}},open:{type:{name:"bool"},required:!1,description:"whether to show or hide the popover",defaultValue:{value:"false",computed:!1}},referenceElement:{type:{name:"node"},required:!1,description:"the element the Popover should point to"},offset:{type:{name:"number"},required:!1,description:"how far away the Popover should be from the element it points to",defaultValue:{value:"12",computed:!1}}},code:'import React, { useState } from "react";\nimport PropTypes from "prop-types";\nimport classNames from "classnames";\nimport "./AtlasPopover.scss";\nimport { usePopper } from "react-popper";\n\n/** A popover which displays above or below the thing which opens it, pointing\n * back to that thing */\nexport default function AtlasPopover({\n  description,\n  title,\n  onReadMoreClick,\n  placement = "top",\n  children,\n  simple = false,\n  open = false,\n  referenceElement,\n  offset = 12,\n}) {\n  const [popperElement, setPopperElement] = useState(null);\n  const [arrowElement, setArrowElement] = useState(null);\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    placement: placement,\n    modifiers: [\n      {\n        name: "offset",\n        options: {\n          offset: [0, offset],\n        },\n      },\n      {\n        name: "arrow",\n        options: {\n          element: arrowElement,\n        },\n      },\n    ],\n  });\n  const classes = classNames("AtlasPopover", {\n    "AtlasPopover--open": open,\n    "AtlasPopover--simple": simple,\n  });\n\n  return (\n    <>\n      {open && (\n        <div\n          className={classes}\n          ref={setPopperElement}\n          style={styles.popper}\n          {...attributes.popper}\n        >\n          <header className="AtlasPopover__header">{title}</header>\n          <div className="AtlasPopover__body">\n            <div className="AtlasPopover__description">{description}</div>\n            {onReadMoreClick && (\n              <button\n                className="AtlasPopover__action"\n                onClick={onReadMoreClick}\n              >\n                {"Read more"}\n              </button>\n            )}\n            {children && <div className="AtlasPopover__meta">{children}</div>}\n          </div>\n          <div\n            className="AtlasPopover__arrow"\n            ref={setArrowElement}\n            style={styles.arrow}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nAtlasPopover.propTypes = {\n  /** specify if it should be positioned above or below */\n  placement: PropTypes.string,\n  /** the primary text of the popover, truncated to 8 lines */\n  description: PropTypes.string.isRequired,\n  /** text which displays in the header of the popover */\n  title: PropTypes.string,\n  /** what to do if Read more is clicked. if not present, read more will not display */\n  onReadMoreClick: PropTypes.func,\n  /** HTML/component(s) to display at the bottom of the popover, such as for metadata */\n  children: PropTypes.any,\n  /** whether to display the default or simple popover */\n  simple: PropTypes.bool,\n  /** whether to show or hide the popover */\n  open: PropTypes.bool,\n  /** the element the Popover should point to */\n  referenceElement: PropTypes.node,\n  /** how far away the Popover should be from the element it points to */\n  offset: PropTypes.number,\n};\n\n/* Questions:\n * does a popover have a maximum height?\n */\n',examples:[{name:"ExampleAtlasPopoverAbove",description:"Popover Above",code:'import React, { useState } from "react";\nimport { AtlasPopover } from "@productplan/atlas";\n\n/** Popover Above */\nexport default function ExampleAtlasPopoverAbove() {\n  const [showPopover, setShowPopover] = useState(false);\n  const [refElement, setRefElement] = useState(null);\n\n  return (\n    <>\n      <div style={{textAlign: "center"}}>\n        <button onClick={() => setShowPopover(!showPopover)} ref={setRefElement}>Show Popover Above</button>\n      </div>\n      <AtlasPopover\n        open={showPopover}\n        title="Popover Above Title"\n        description="Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n        Cras ullamcorper blandit ipsum at iaculis.\n        Integer scelerisque efficitur ipsum."\n        placement="top"\n        onReadMoreClick={() => alert("well hello")}\n        referenceElement={refElement}\n      >\n      <div>Hello</div>\n      <div>Render me!</div>\n      <div>render whatever!</div>\n    </AtlasPopover>\n    </>\n  );\n}\n\n'},{name:"ExampleAtlasPopoverBelow",description:"Popover Below",code:'import React, {useState} from "react";\nimport { AtlasPopover } from "@productplan/atlas";\n\n/** Popover Below */\nexport default function ExampleAtlasPopoverBelow() {\n  const [showPopover, setShowPopover] = useState(false);\n  const [refElement, setRefElement] = useState(null);\n\n  return (\n    <>\n      <div style={{textAlign: "center"}}>\n        <button onClick={() => setShowPopover(!showPopover)} ref={setRefElement}>Show Popover Below</button>\n      </div>\n      <AtlasPopover\n        open={showPopover}\n        title="Popover Below Title"\n        description="Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n        Cras ullamcorper blandit ipsum at iaculis.\n        Integer scelerisque efficitur ipsum."\n        placement="bottom"\n        onReadMoreClick={() => alert("well hello")}\n        referenceElement={refElement}\n      >\n      <div>Hello</div>\n      <div>Render me!</div>\n      <div>render whatever!</div>\n    </AtlasPopover>\n    </>\n  );\n\n}\n'},{name:"ExampleAtlasPopoverLeft",description:"Popover Left",code:'import React, { useState } from "react";\nimport { AtlasPopover } from "@productplan/atlas";\n\n/** Popover Left */\nexport default function ExampleAtlasPopoverAbove() {\n  const [showPopover, setShowPopover] = useState(false);\n  const [refElement, setRefElement] = useState(null);\n\n  return (\n    <>\n      <div style={{textAlign: "center"}}>\n        <button onClick={() => setShowPopover(!showPopover)} ref={setRefElement}>Show Popover Left</button>\n      </div>\n      <AtlasPopover\n        open={showPopover}\n        title="Popover Left Title"\n        description="Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n        Cras ullamcorper blandit ipsum at iaculis.\n        Integer scelerisque efficitur ipsum."\n        placement="left"\n        onReadMoreClick={() => alert("well hello")}\n        referenceElement={refElement}\n      >\n      <div>Hello</div>\n      <div>Render me!</div>\n      <div>render whatever!</div>\n    </AtlasPopover>\n    </>\n  );\n}\n\n'},{name:"ExampleAtlasPopoverRight",description:"Popover Right",code:'import React, { useState } from "react";\nimport { AtlasPopover } from "@productplan/atlas";\n\n/** Popover Right */\nexport default function ExampleAtlasPopoverAbove() {\n  const [showPopover, setShowPopover] = useState(false);\n  const [refElement, setRefElement] = useState(null);\n\n  return (\n    <>\n      <div style={{textAlign: "center"}}>\n        <button onClick={() => setShowPopover(!showPopover)} ref={setRefElement}>Show Popover Right</button>\n      </div>\n      <AtlasPopover\n        open={showPopover}\n        title="Popover Right Title"\n        description="Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n        Cras ullamcorper blandit ipsum at iaculis.\n        Integer scelerisque efficitur ipsum."\n        placement="right"\n        onReadMoreClick={() => alert("well hello")}\n        referenceElement={refElement}\n      >\n      <div>Hello</div>\n      <div>Render me!</div>\n      <div>render whatever!</div>\n    </AtlasPopover>\n    </>\n  );\n}\n\n'},{name:"ExampleAtlasPopoverSimple",description:"Popover Simple",code:'import React, {useState} from "react";\nimport { AtlasPopover } from "@productplan/atlas";\n\n\n/** Popover Simple */\nexport default function ExampleAtlasPopoverSimple() {\n  const [showPopover, setShowPopover] = useState(false);\n  const [refElement, setRefElement] = useState(null);\n\n  return (\n    <>\n      <div style={{textAlign: "center"}}>\n        <button onClick={() => setShowPopover(!showPopover)} ref={setRefElement}>Show Popover Simple</button>\n      </div>\n      <AtlasPopover\n        open={showPopover}\n        title="Popover Simple Title"\n        description="I am a simple popover."\n        placement="top"\n        onReadMoreClick={() => alert("well hello")}\n        simple={true}\n        referenceElement={refElement}\n      >\n      <div>Hello</div>\n      <div>Render me!</div>\n      <div>render whatever!</div>\n    </AtlasPopover>\n    </>\n  );\n}\n'}]},{name:"BasicButton",description:"A Basic Button",props:{align:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"center"',computed:!1},{value:'"right"',computed:!1}]},required:!1,description:"Button content alignment (left, center, right)",defaultValue:{value:'"center"',computed:!1}},disabled:{type:{name:"bool"},required:!1,description:"The button is disabled or not",defaultValue:{value:"undefined",computed:!0}},label:{type:{name:"string"},required:!0,description:"Text to display in the button"},htmlType:{type:{name:"enum",value:[{value:'"button"',computed:!1},{value:'"submit"',computed:!1},{value:'"reset"',computed:!1}]},required:!1,description:"html type attribute, one of button, submit, or reset",defaultValue:{value:'"button"',computed:!1}},htmlId:{type:{name:"string"},required:!1,description:"html id attribute"},type:{type:{name:"enum",value:[{value:'"default"',computed:!1},{value:'"secondary"',computed:!1},{value:'"tertiary"',computed:!1},{value:'"ghost"',computed:!1},{value:'"destructive"',computed:!1}]},required:!1,description:"one of default, secondary, tertiary, destructive, ghost",defaultValue:{value:'"default"',computed:!1}},onClick:{type:{name:"func"},required:!1,description:"Click Handler"},size:{type:{name:"enum",value:[{value:'"default"',computed:!1},{value:'"small"',computed:!1},{value:'"mini"',computed:!1},{value:'"full-width"',computed:!1}]},required:!1,description:"button size (default, small, mini, full-width)",defaultValue:{value:'"default"',computed:!1}},trailingIcon:{type:{name:"element"},required:!1,description:"icon to display to the right of the label",defaultValue:{value:"null",computed:!1}},leadingIcon:{type:{name:"element"},required:!1,description:"icon to display to the left of the label",defaultValue:{value:"null",computed:!1}}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport "./BasicButton.scss";\n\nconst buttonHtmlTypes = ["button", "submit", "reset"];\nexport const buttonVariants = [\n  "default",\n  "secondary",\n  "tertiary",\n  "ghost",\n  "destructive",\n];\nexport const buttonSizes = ["default", "small", "mini", "full-width"];\nexport const buttonAlignments = ["left", "center", "right"];\n\n/** A Basic Button */\nexport default function BasicButton({\n  label,\n  htmlId,\n  onClick,\n  align = "center",\n  disabled = undefined,\n  htmlType = "button",\n  leadingIcon = null,\n  size = "default",\n  trailingIcon = null,\n  type = "default",\n}) {\n  if (globalThis?.customElements) {\n    import("@productplan/atlas-web-components/dist/lib/BasicButton");\n  }\n  const properties = {};\n  if (disabled) {\n    properties.disabled = disabled;\n  }\n  return (\n    <atlas-basic-button\n      // create a unique key to force re-rendering of the component\n      key={`${label}-${htmlId}-${onClick}-${align}-${disabled}-${htmlType}-${leadingIcon}-${size}-${trailingIcon}-${type}`}\n      align={align}\n      htmlId={htmlId}\n      label={label}\n      size={size}\n      theme={type}\n      type={htmlType}\n      onClick={onClick}\n      {...properties}\n    >\n      {leadingIcon && <span slot="leadingIcon">{leadingIcon}</span>}\n      {trailingIcon && <span slot="trailingIcon">{trailingIcon}</span>}\n    </atlas-basic-button>\n  );\n}\n\nBasicButton.propTypes = {\n  /** Button content alignment (left, center, right) */\n  align: PropTypes.oneOf(buttonAlignments),\n  /** The button is disabled or not */\n  disabled: PropTypes.bool,\n  /** Text to display in the button */\n  label: PropTypes.string.isRequired,\n  /** html type attribute, one of button, submit, or reset */\n  htmlType: PropTypes.oneOf(buttonHtmlTypes),\n  /** html id attribute */\n  htmlId: PropTypes.string,\n  /** one of default, secondary, tertiary, destructive, ghost */\n  type: PropTypes.oneOf(buttonVariants),\n  /** Click Handler */\n  onClick: PropTypes.func,\n  /** button size (default, small, mini, full-width) */\n  size: PropTypes.oneOf(buttonSizes),\n  /** icon to display to the right of the label */\n  trailingIcon: PropTypes.element,\n  /** icon to display to the left of the label */\n  leadingIcon: PropTypes.element,\n};\n',examples:[{name:"ExampleBasicButtonSizes",description:"Button Sizes",code:'import { BasicButton } from "@productplan/atlas";\n\n/** Button Sizes */\nexport default function ExampleBasicButtonSizes() {\n  const label = "Button";\n\n  return (\n    <>\n      <div>\n        <h5>Default</h5>\n\n        <BasicButton label={label} type="default" />\n      </div>\n\n      <div>\n        <h5>Small</h5>\n\n        <BasicButton label={label} type="default" size="small" />\n      </div>\n\n      <div>\n        <h5>Mini</h5>\n\n        <BasicButton label={label} type="default" size="mini" />\n      </div>\n\n      <div>\n        <h5>Full Width</h5>\n\n        <BasicButton label={label} type="default" size="full-width" />\n      </div>\n    </>\n  );\n}\n'},{name:"ExampleBasicButtonTypes",description:"Button Types (Themes)",code:'import { BasicButton } from "@productplan/atlas";\n\n/** Button Types (Themes) */\nexport default function ExampleBasicButtonStyles() {\n  const label = "Button";\n\n  return (\n    <>\n      <div>\n        <h5>Default</h5>\n\n        <BasicButton label={label} type="default" />\n        <BasicButton label={label} type="default" disabled />\n        <BasicButton label={label} type="default" size="small" />\n        <BasicButton label={label} type="default" size="mini" />\n      </div>\n\n      <div>\n        <h5>Secondary</h5>\n\n        <BasicButton label={label} type="secondary" />\n        <BasicButton label={label} type="secondary" disabled />\n        <BasicButton label={label} type="secondary" size="small" />\n        <BasicButton label={label} type="secondary" size="mini" />\n      </div>\n\n      <div>\n        <h5>Tertiary</h5>\n\n        <BasicButton label={label} type="tertiary" />\n        <BasicButton label={label} type="tertiary" disabled />\n        <BasicButton label={label} type="tertiary" size="small" />\n        <BasicButton label={label} type="tertiary" size="mini" />\n      </div>\n\n      <div>\n        <h5>Ghost</h5>\n\n        <BasicButton label={label} type="ghost" />\n        <BasicButton label={label} type="ghost" disabled />\n        <BasicButton label={label} type="ghost" size="small" />\n        <BasicButton label={label} type="ghost" size="mini" />\n      </div>\n\n      <div>\n        <h5>Destructive</h5>\n\n        <BasicButton label={label} type="destructive" />\n        <BasicButton label={label} type="destructive" disabled />\n        <BasicButton label={label} type="destructive" size="small" />\n        <BasicButton label={label} type="destructive" size="mini" />\n      </div>\n    </>\n  );\n}\n'},{name:"ExampleBasicButtonWithLeadingIcon",description:"Button with a leading icon",code:'import { BasicButton } from "@productplan/atlas";\n\n/** Button with a leading icon */\nexport default function ExampleBasicButtonWithLeadingIcon() {\n  return (\n    <>\n      <BasicButton label="I have an icon!" htmlType="button" type="default" leadingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" htmlType="button" type="secondary" leadingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" htmlType="button" type="tertiary" leadingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" htmlType="button" type="destructive" leadingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" htmlType="button" type="ghost" leadingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" htmlType="button" type="default" leadingIcon={<i className="fas fa-check" />} size="small" />\n      <BasicButton label="I have an icon!" htmlType="button" type="default" leadingIcon={<i className="fas fa-check" />} size="mini" />\n    </>\n  );\n}\n'},{name:"ExampleBasicButtonWithTrailingIcon",description:"Button with a trailing icon",code:'import { BasicButton } from "@productplan/atlas";\n\n/** Button with a trailing icon */\nexport default function ExampleBasicButtonWithTrailingIcon() {\n  return (\n    <>\n      <BasicButton label="I have an icon!" type="default" trailingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" type="secondary" trailingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" type="tertiary" trailingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" type="destructive" trailingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" type="ghost" trailingIcon={<i className="fas fa-check" />} />\n      <BasicButton label="I have an icon!" type="default" trailingIcon={<i className="fas fa-check" />} size="small" />\n      <BasicButton label="I have an icon!" type="default" trailingIcon={<i className="fas fa-check" />} size="mini" />\n    </>\n  );\n}\n'},{name:"Playground",description:"Playground",code:'import { useState } from "react";\nimport { BasicButton } from "@productplan/atlas";\n\n/** Playground */\nexport default function ExampleBasicButtonPlayground() {\n  const [size, setSize] = useState("default");\n  const [theme, setTheme] = useState("default");\n  const [disabled, setDisabled] = useState(false);\n  const [trailingIcon, setTrailingIcon] = useState(false);\n  const [leadingIcon, setLeadingIcon] = useState(false);\n  const [align, setAlign] = useState("center");\n  const [label, setLabel] = useState("Button");\n\n  const sizes = [\n    { value: "default", label: "Default" },\n    { value: "small", label: "Small" },\n    { value: "mini", label: "Mini" },\n    { value: "full-width", label: "Full Width"},\n  ];\n\n  const themes = [\n    { value: "default", label: "Default" },\n    { value: "secondary", label: "Secondary" },\n    { value: "tertiary", label: "Tertiary" },\n    { value: "destructive", label: "Destructive" },\n    { value: "ghost", label: "Ghost" },\n  ];\n\n  const alignments = [\n    { value: "left", label: "Left" },\n    { value: "center", label: "Center" },\n    { value: "right", label: "Right" },\n  ];\n\n  const changeSize = (e) => {\n    setSize(e.target.value);\n  };\n\n  const changeTheme = (e) => {\n    setTheme(e.target.value);\n  };\n\n  const changeDisabled = (e) => {\n    setDisabled(e.target.checked || false);\n  };\n\n  const changeTrailingIcon = (e) => {\n    setTrailingIcon(e.target.checked || false);\n  };\n\n  const changeLeadingIcon = (e) => {\n    setLeadingIcon(e.target.checked || false);\n  };\n\n  const changeLabel = (e) => {\n    setLabel(e.target.value);\n  };\n\n  const changeAlign = (e) => {\n    setAlign(e.target.value);\n  };\n\n  return (\n    <>\n      <div>\n        <h5>Size</h5>\n        <div className="example-playground-options">\n          {sizes.map((s) => (\n            <label key={s.value}>\n              <input type="radio" name="size" value={s.value} onChange={changeSize} checked={s.value === size} />\n              {s.label}\n            </label>\n          ))}\n        </div>\n\n        <h5>Theme</h5>\n        <div className="example-playground-options">\n          {themes.map((t) => (\n            <label key={t.value}>\n              <input type="radio" name="theme" value={t.value} onChange={changeTheme} checked={t.value === theme} />\n              {t.label}\n            </label>\n          ))}\n        </div>\n\n        <h5>Disabled</h5>\n        <div className="example-playground-options">\n          <label>\n            <input type="checkbox" name="disabled" value="true" onChange={changeDisabled} />\n            Disabled?\n          </label>\n        </div>\n\n        <h5>Trailing Icon</h5>\n        <div className="example-playground-options">\n          <label>\n            <input type="checkbox" name="trailingIcon" value="true" onChange={changeTrailingIcon} checked={trailingIcon === true} />\n            Show?\n          </label>\n        </div>\n\n        <h5>Leading Icon</h5>\n        <div className="example-playground-options">\n        <label>\n            <input type="checkbox" name="leadingIcon" value="true" onChange={changeLeadingIcon} checked={leadingIcon === true} />\n            Show?\n          </label>\n        </div>\n\n        <h5>Label</h5>\n        <div className="example-playground-options">\n          <label>\n            <input type="text" name="label" value={label} onChange={changeLabel} />\n          </label>\n        </div>\n\n        <h5>Content Alignment</h5>\n        <div className="example-playground-options">\n          {alignments.map((a) => (\n            <label key={a.value}>\n              <input type="radio" name="align" value={a.value} onChange={changeAlign} checked={a.value === align} />\n              {a.label}\n            </label>\n          ))}\n        </div>\n      </div>\n\n      <h5>Result:</h5>\n\n      <div>\n        <BasicButton\n          align={align}\n          label={label}\n          type={theme}\n          size={size}\n          disabled={disabled === true ? true : undefined}\n          trailingIcon={trailingIcon ? <i className="fas fa-check" /> : null}\n          leadingIcon={leadingIcon ? <i className="fas fa-check" /> : null}\n          onClick={() => { alert(`Clicked ${label} \ud83c\udf10 !!`)}}\n        />\n      </div>\n    </>\n  );\n}\n'}]},{name:"DialogBox",description:"",props:{title:{type:{name:"string"},required:!0,description:"Displays in the Modal Header"},subtitle:{type:{name:"string"},required:!0,description:"Displays below the title"},children:{type:{name:"element"},required:!1,description:"child nodes composed in JSX"},visible:{type:{name:"bool"},required:!1,description:"whether the dialog is open or not",defaultValue:{value:"false",computed:!1}},onCancel:{type:{name:"func"},required:!1,description:"callback function for cancel event"},onClose:{type:{name:"func"},required:!1,description:"callback function for close event"},customHeader:{type:{name:"element"},required:!1,description:"pass in JSX to override the default header"},customFooter:{type:{name:"element"},required:!1,description:"pass in JSX to override the default footer"}},code:'import React, { useEffect, useRef } from "react";\nimport PropTypes from "prop-types";\nimport BasicButton from "@components/BasicButton";\nimport "./DialogBox.scss";\nimport IconButton from "@components/IconButton";\n\n{\n  /** A Simple modal dialog that displays above the page content and renders children in the body of the modal */\n}\nexport default function DialogBox({\n  title,\n  subtitle,\n  // customHeader,\n  // customFooter,\n  children,\n  visible = false,\n  onCancel,\n  onClose,\n}) {\n  // const [isVisible, setIsVisible] = useState(false);\n  const dialogEl = useRef(null);\n\n  useEffect(() => {\n    if (visible) {\n      dialogEl.current.showModal();\n    }\n  }, [visible]);\n\n  // setIsVisible(visible);\n  return (\n    <dialog\n      className="ModalDialog"\n      ref={dialogEl}\n      onCancel={onCancel}\n      onClose={onClose}\n    >\n      <ModalHeader\n        title={title}\n        subtitle={subtitle}\n        handleClose={() => dialogEl.current.close()}\n      />\n\n      <section className="ModalDialog__body">{children}</section>\n\n      <ModalFooter>\n        <BasicButton\n          type="ghost"\n          label="Cancel"\n          onClick={() => dialogEl.current.close()}\n          htmlId="dialogBoxCancel"\n        />\n        <BasicButton label="Submit" htmlType="submit" htmlForm="aform" />\n      </ModalFooter>\n    </dialog>\n  );\n}\n\nDialogBox.propTypes = {\n  /** Displays in the Modal Header */\n  title: PropTypes.string.isRequired,\n  /** Displays below the title */\n  subtitle: PropTypes.string.isRequired,\n  /** child nodes composed in JSX */\n  children: PropTypes.element,\n  /** whether the dialog is open or not */\n  visible: PropTypes.bool,\n  /** callback function for cancel event */\n  onCancel: PropTypes.func,\n  /** callback function for close event */\n  onClose: PropTypes.func,\n  /** pass in JSX to override the default header */\n  customHeader: PropTypes.element,\n  /** pass in JSX to override the default footer */\n  customFooter: PropTypes.element,\n};\n\nfunction ModalHeader({ title, subtitle, handleClose }) {\n  return (\n    <header className="ModalDialog__header">\n      <div>\n        <h1 className="ModalDialog__title">{title}</h1>\n        <p className="ModalDialog__subtitle">{subtitle}</p>\n      </div>\n      <IconButton faClass="fa-times" onClick={handleClose} />\n    </header>\n  );\n}\n\nModalHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n\nfunction ModalFooter(props) {\n  return <footer className="ModalDialog__footer">{props.children}</footer>;\n}\n\nModalFooter.propTypes = {\n  children: PropTypes.element,\n};\n',examples:[]},{name:"Drawer",description:"A drawer is used when you need to perform an action that may be helped by keeping the roadmap layout in context.\nThis will most likely be a place for multiple actions or a place for a complex action that takes multiple steps.",props:{position:{type:{name:"enum",value:[{value:'"left"',computed:!1},{value:'"right"',computed:!1},{value:'"top"',computed:!1},{value:'"bottom"',computed:!1}]},required:!0,description:"Position for the Drawer. Options: top, bottom, right, left"},open:{type:{name:"bool"},required:!1,description:"Current state for the Drawer.",defaultValue:{value:"false",computed:!1}},children:{type:{name:"node"},required:!1,description:"Children (nodes) to display inside the Drawer"}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport classNames from "classnames";\nimport BasicButton from "@components/BasicButton";\nimport "./Drawer.scss";\n\nconst DrawerBack = ({ label = "Back", onClick = () => {} }) => {\n  const classes = classNames("Drawer__back");\n\n  return (\n    <div className={classes}>\n      <BasicButton\n        label={label}\n        type="ghost"\n        onClick={onClick}\n        leadingIcon={<i className="fa fa-chevron-left"></i>}\n      />\n    </div>\n  );\n};\n\nDrawerBack.propTypes = {\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nconst DrawerActions = ({ children }) => {\n  const classes = classNames("Drawer__actions");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerActions.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerTitle = ({ children }) => {\n  const classes = classNames("Drawer__title");\n\n  return <h4 className={classes}>{children}</h4>;\n};\n\nDrawerTitle.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerHeader = ({ children }) => {\n  const classes = classNames("Drawer__header");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerHeader.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerBody = ({ children }) => {\n  const classes = classNames("Drawer__body");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerBody.propTypes = {\n  children: PropTypes.node,\n};\n\nconst DrawerFooter = ({ children }) => {\n  const classes = classNames("Drawer__footer");\n\n  return <div className={classes}>{children}</div>;\n};\n\nDrawerFooter.propTypes = {\n  children: PropTypes.node,\n};\n\n/**\n * A drawer is used when you need to perform an action that may be helped by keeping the roadmap layout in context.\n * This will most likely be a place for multiple actions or a place for a complex action that takes multiple steps.\n *\n */\nexport default function Drawer({ position, children, open = false }) {\n  const drawerClasses = classNames("Drawer", `Drawer--${position}`);\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <div role="dialog" aria-modal="true" className={drawerClasses}>\n      {children}\n    </div>\n  );\n}\n\nDrawer.Header = DrawerHeader;\nDrawer.Body = DrawerBody;\nDrawer.Footer = DrawerFooter;\nDrawer.Title = DrawerTitle;\nDrawer.Actions = DrawerActions;\nDrawer.Back = DrawerBack;\n\nDrawer.propTypes = {\n  /** Position for the Drawer. Options: top, bottom, right, left */\n  position: PropTypes.oneOf(["left", "right", "top", "bottom"]).isRequired,\n  /** Current state for the Drawer. */\n  open: PropTypes.bool,\n  /** Children (nodes) to display inside the Drawer */\n  children: PropTypes.node,\n};\n',examples:[]},{name:"IconButton",description:"A simple button containing only an icon",props:{faClass:{type:{name:"string"},required:!0,description:"The icon class to render"},onClick:{type:{name:"func"},required:!1,description:"Click Handler"},isActive:{type:{name:"bool"},required:!1,description:"Whether or not the button is active"}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport classNames from "classnames";\nimport "./IconButton.scss";\n\n/** A simple button containing only an icon */\nexport default function IconButton({ faClass, onClick, isActive }) {\n  const iconClasses = classNames("fa", faClass);\n  const buttonClasses = classNames("IconButton", {\n    "is-active": isActive,\n  });\n\n  return (\n    <button className={buttonClasses} onClick={onClick}>\n      <i className={iconClasses} />\n    </button>\n  );\n}\n\nIconButton.propTypes = {\n  /** The icon class to render */\n  faClass: PropTypes.string.isRequired,\n  /** Click Handler */\n  onClick: PropTypes.func,\n  /** Whether or not the button is active */\n  isActive: PropTypes.bool,\n};\n',examples:[]}]},7034:function(e,n,t){"use strict";function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){a(e,n,t[n])}))}return e}t.r(n),t.d(n,{default:function(){return T}});var l=t(2322),i=t(7729),r=t.n(i),s=t(9097),c=t.n(s),p=t(550),u=t.n(p),d=function(){return(0,l.jsx)("div",{className:u().Heading,children:(0,l.jsx)(c(),{href:"/",children:"\ud83c\udf10 ProductPlan Atlas"})})},m=t(5632),f=t(3980),h=t.n(f),v=t(2779),y=t.n(v),b=t(7271),g=t.n(b),B=function(e){var n,t=e.href,o=e.label,i=(0,m.useRouter)(),r=(i.pathname,y()((a(n={},g().Sidebar__listItem,!0),a(n,g().Sidebar__listItemActive,i.asPath===t||i.asPath.startsWith(t)&&"/"!==t),n)));return(0,l.jsx)("li",{className:r,children:(0,l.jsx)(c(),{href:t,children:o})})};function w(e){var n=e.components,t=((0,m.useRouter)(),["BasicButton","AtlasPopover","AtlasAlert","AtlasBanner"]);return(0,l.jsxs)("nav",{className:g().Sidebar,children:[(0,l.jsx)("div",{className:g().Sidebar__title,children:"Atlas"}),(0,l.jsxs)("ul",{className:g().Sidebar__list,children:[(0,l.jsx)(B,{href:"/",label:"Welcome"}),(0,l.jsx)("li",{className:g().Sidebar__listItem,children:(0,l.jsxs)("a",{href:"https://github.com/ProductPlan/atlas-mono",target:"_blank",rel:"noreferrer",children:["GitHub ",(0,l.jsx)("i",{className:"fa-brands fa-github"})]})}),(0,l.jsx)(B,{href:"/tokens",label:"Tokens"})]}),(0,l.jsx)("div",{className:g().Sidebar__title,children:"Components"}),(0,l.jsx)("ul",{className:g().Sidebar__list,children:n.filter((function(e){return t.includes(e)})).map((function(e){return(0,l.jsx)(B,{href:"/components/".concat(e),label:e},e)}))})]})}w.propTypes={components:h().array.isRequired};var x=t(5319),P=t.n(x),T=(t(3635),t(580),t(4459),t(7417),function(e){var n=e.Component,t=e.pageProps;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r(),{children:(0,l.jsx)("title",{children:"ProductPlan Atlas"})}),(0,l.jsxs)("div",{children:[(0,l.jsx)(d,{}),(0,l.jsxs)("div",{className:"Documentation",children:[(0,l.jsx)(w,{components:P().map((function(e){return e.name}))}),(0,l.jsx)(n,o({},t))]})]})]})})},5253:function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getDomainLocale=function(e,n,t,a){return!1};("function"===typeof n.default||"object"===typeof n.default&&null!==n.default)&&"undefined"===typeof n.default.__esModule&&(Object.defineProperty(n.default,"__esModule",{value:!0}),Object.assign(n.default,n),e.exports=n.default)},162:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(4566).Z;t(9178).default;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=t(3903).Z,l=t(5154).Z,i=o(t(2784)),r=t(9918),s=t(4400),c=t(3220),p=t(4069),u=t(2030),d=t(5253),m=t(3952),f={};function h(e,n,t,a){if(e&&r.isLocalURL(n)){Promise.resolve(e.prefetch(n,t,a)).catch((function(e){0}));var o=a&&"undefined"!==typeof a.locale?a.locale:e&&e.locale;f[n+"%"+t+(o?"%"+o:"")]=!0}}var v=i.default.forwardRef((function(e,n){var t,o=e.href,v=e.as,y=e.children,b=e.prefetch,g=e.passHref,B=e.replace,w=e.shallow,x=e.scroll,P=e.locale,T=e.onClick,A=e.onMouseEnter,C=e.onTouchStart,_=e.legacyBehavior,k=void 0===_?!0!==Boolean(!1):_,I=l(e,["href","as","children","prefetch","passHref","replace","shallow","scroll","locale","onClick","onMouseEnter","onTouchStart","legacyBehavior"]);t=y,!k||"string"!==typeof t&&"number"!==typeof t||(t=i.default.createElement("a",null,t));var S=!1!==b,N=i.default.useContext(c.RouterContext),E=i.default.useContext(p.AppRouterContext);E&&(N=E);var R,D=i.default.useMemo((function(){var e=a(r.resolveHref(N,o,!0),2),n=e[0],t=e[1];return{href:n,as:v?r.resolveHref(N,v):t||n}}),[N,o,v]),q=D.href,M=D.as,j=i.default.useRef(q),O=i.default.useRef(M);k&&(R=i.default.Children.only(t));var L=k?R&&"object"===typeof R&&R.ref:n,z=a(u.useIntersection({rootMargin:"200px"}),3),H=z[0],V=z[1],W=z[2],F=i.default.useCallback((function(e){O.current===M&&j.current===q||(W(),O.current=M,j.current=q),H(e),L&&("function"===typeof L?L(e):"object"===typeof L&&(L.current=e))}),[M,L,q,W,H]);i.default.useEffect((function(){var e=V&&S&&r.isLocalURL(q),n="undefined"!==typeof P?P:N&&N.locale,t=f[q+"%"+M+(n?"%"+n:"")];e&&!t&&h(N,q,M,{locale:n})}),[M,q,V,P,S,N]);var $={ref:F,onClick:function(e){k||"function"!==typeof T||T(e),k&&R.props&&"function"===typeof R.props.onClick&&R.props.onClick(e),e.defaultPrevented||function(e,n,t,a,o,l,s,c,p,u){if("A"!==e.currentTarget.nodeName.toUpperCase()||!function(e){var n=e.currentTarget.target;return n&&"_self"!==n||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey||e.nativeEvent&&2===e.nativeEvent.which}(e)&&r.isLocalURL(t)){e.preventDefault();var d=function(){"beforePopState"in n?n[o?"replace":"push"](t,a,{shallow:l,locale:c,scroll:s}):n[o?"replace":"push"](t,{forceOptimisticNavigation:!u})};p?i.default.startTransition(d):d()}}(e,N,q,M,B,w,x,P,Boolean(E),S)},onMouseEnter:function(e){k||"function"!==typeof A||A(e),k&&R.props&&"function"===typeof R.props.onMouseEnter&&R.props.onMouseEnter(e),!S&&E||r.isLocalURL(q)&&h(N,q,M,{priority:!0})},onTouchStart:function(e){k||"function"!==typeof C||C(e),k&&R.props&&"function"===typeof R.props.onTouchStart&&R.props.onTouchStart(e),!S&&E||r.isLocalURL(q)&&h(N,q,M,{priority:!0})}};if(!k||g||"a"===R.type&&!("href"in R.props)){var U="undefined"!==typeof P?P:N&&N.locale,X=N&&N.isLocaleDomain&&d.getDomainLocale(M,U,N.locales,N.domainLocales);$.href=X||m.addBasePath(s.addLocale(M,U,N&&N.defaultLocale))}return k?i.default.cloneElement(R,$):i.default.createElement("a",Object.assign({},I,$),t)}));n.default=v,("function"===typeof n.default||"object"===typeof n.default&&null!==n.default)&&"undefined"===typeof n.default.__esModule&&(Object.defineProperty(n.default,"__esModule",{value:!0}),Object.assign(n.default,n),e.exports=n.default)},2030:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(4566).Z;Object.defineProperty(n,"__esModule",{value:!0}),n.useIntersection=function(e){var n=e.rootRef,t=e.rootMargin,c=e.disabled||!i,p=a(o.useState(!1),2),u=p[0],d=p[1],m=a(o.useState(null),2),f=m[0],h=m[1];o.useEffect((function(){if(i){if(c||u)return;if(f&&f.tagName){var e=function(e,n,t){var a=function(e){var n,t={root:e.root||null,margin:e.rootMargin||""},a=s.find((function(e){return e.root===t.root&&e.margin===t.margin}));if(a&&(n=r.get(a)))return n;var o=new Map,l=new IntersectionObserver((function(e){e.forEach((function(e){var n=o.get(e.target),t=e.isIntersecting||e.intersectionRatio>0;n&&t&&n(t)}))}),e);return n={id:t,observer:l,elements:o},s.push(t),r.set(t,n),n}(t),o=a.id,l=a.observer,i=a.elements;return i.set(e,n),l.observe(e),function(){if(i.delete(e),l.unobserve(e),0===i.size){l.disconnect(),r.delete(o);var n=s.findIndex((function(e){return e.root===o.root&&e.margin===o.margin}));n>-1&&s.splice(n,1)}}}(f,(function(e){return e&&d(e)}),{root:null==n?void 0:n.current,rootMargin:t});return e}}else if(!u){var a=l.requestIdleCallback((function(){return d(!0)}));return function(){return l.cancelIdleCallback(a)}}}),[f,c,t,n,u]);var v=o.useCallback((function(){d(!1)}),[]);return[h,u,v]};var o=t(2784),l=t(9071),i="function"===typeof IntersectionObserver,r=new Map,s=[];("function"===typeof n.default||"object"===typeof n.default&&null!==n.default)&&"undefined"===typeof n.default.__esModule&&(Object.defineProperty(n.default,"__esModule",{value:!0}),Object.assign(n.default,n),e.exports=n.default)},4069:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.TemplateContext=n.GlobalLayoutRouterContext=n.LayoutRouterContext=n.AppRouterContext=void 0;var a=(0,t(3903).Z)(t(2784)),o=a.default.createContext(null);n.AppRouterContext=o;var l=a.default.createContext(null);n.LayoutRouterContext=l;var i=a.default.createContext(null);n.GlobalLayoutRouterContext=i;var r=a.default.createContext(null);n.TemplateContext=r},550:function(e){e.exports={Heading:"Heading_Heading__EQADp"}},7271:function(e){e.exports={Sidebar:"Navigation_Sidebar__ycYDm",Sidebar__title:"Navigation_Sidebar__title__LoJn8",Sidebar__list:"Navigation_Sidebar__list__Nlfdq",Sidebar__listItem:"Navigation_Sidebar__listItem__5Wet1",Sidebar__listItemActive:"Navigation_Sidebar__listItemActive__3t7we"}},7417:function(){},4459:function(){},580:function(){},3635:function(){},7729:function(e,n,t){e.exports=t(5913)},9097:function(e,n,t){e.exports=t(162)},5632:function(e,n,t){e.exports=t(3642)},8262:function(e,n,t){"use strict";var a=t(3586);function o(){}function l(){}l.resetWarningCache=o,e.exports=function(){function e(e,n,t,o,l,i){if(i!==a){var r=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw r.name="Invariant Violation",r}}function n(){return e}e.isRequired=e;var t={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:l,resetWarningCache:o};return t.PropTypes=t,t}},3980:function(e,n,t){e.exports=t(8262)()},3586:function(e){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}},function(e){var n=function(n){return e(e.s=n)};e.O(0,[774,179],(function(){return n(2170),n(3642)}));var t=e.O();_N_E=t}]);